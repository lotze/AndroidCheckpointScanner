package com.thomaslotze.survivedc;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.UUID;

import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.net.Uri;
import android.os.Bundle;
import android.telephony.TelephonyManager;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;

public class SelectCheckpoint extends Activity {
	String checkpointId = "";
	String deviceId = "";
	LocationManager locationManager;
	LocationListener locationListener;
	Location location = null;
	
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        // Check and see if barcode scanner is available; if not, prompt the user to download and install it
        final boolean scanAvailable = isIntentAvailable(this,"com.google.zxing.client.android.SCAN");
        if (!scanAvailable) {
	        Intent intent = new Intent(Intent.ACTION_VIEW);
	        intent.setData(Uri.parse("market://details?id=com.google.zxing.client.android"));
	        startActivity(intent);
        }
        
        // get unique phone id from a combination of sources
        final TelephonyManager tm = (TelephonyManager) getBaseContext().getSystemService(Context.TELEPHONY_SERVICE);
        final String tmDevice, tmSerial, androidId;
        tmDevice = "" + tm.getDeviceId();
        tmSerial = "" + tm.getSimSerialNumber();
        androidId = "" + android.provider.Settings.Secure.getString(getContentResolver(), android.provider.Settings.Secure.ANDROID_ID);
        UUID deviceUuid = new UUID(androidId.hashCode(), ((long)tmDevice.hashCode() << 32) | tmSerial.hashCode());
        deviceId = deviceUuid.toString();
        
        // Acquire a reference to the system Location Manager
        locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);

        // Define a listener that responds to location updates
        locationListener = new LocationListener() {
            public void onLocationChanged(Location location) {
              // Called when a new location is found by the network location provider.
              updateLocation(location);
            }

            public void onStatusChanged(String provider, int status, Bundle extras) {}

            public void onProviderEnabled(String provider) {}

            public void onProviderDisabled(String provider) {}
          };

        // Register the listener with the Location Manager to receive location updates
        locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListener);
        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListener);

        setContentView(R.layout.main);
    }
    
    public void selectCheckpoint(View view) {
        checkpointId=((Button)view).getText().toString();
        setContentView(R.layout.scanning);
        Intent intent = new Intent("com.google.zxing.client.android.SCAN");
        intent.setPackage("com.google.zxing.client.android");
        intent.putExtra("SCAN_MODE", "QR_CODE_MODE");
        startActivityForResult(intent, 0);
    }
    
	/**
	 * Indicates whether the specified action can be used as an intent. This
	 * method queries the package manager for installed packages that can
	 * respond to an intent with the specified action. If no suitable package is
	 * found, this method returns false.
	 *
	 * @param context The application's environment.
	 * @param action The Intent action to check for availability.
	 *
	 * @return True if an Intent with the specified action can be sent and
	 *         responded to, false otherwise.
	 */
	public static boolean isIntentAvailable(Context context, String action) {
	    final PackageManager packageManager = context.getPackageManager();
	    final Intent intent = new Intent(action);
	    List<ResolveInfo> list =
	            packageManager.queryIntentActivities(intent,
	                    PackageManager.MATCH_DEFAULT_ONLY);
	    return list.size() > 0;
	}
	
	// We only really want an approximation of geolocation, so once we get it, stop listening
	public void updateLocation(Location updated_location) {
		if ((location == null) || (updated_location.getProvider() == LocationManager.GPS_PROVIDER)) {
			location = updated_location;
			if (updated_location.getProvider() == LocationManager.GPS_PROVIDER) {
				locationManager.removeUpdates(locationListener);
			}
		}
	}


	public void onActivityResult(int requestCode, int resultCode, Intent intent) {
	    if (requestCode == 0) {
	        if (resultCode == RESULT_OK) {
	            String contents = intent.getStringExtra("SCAN_RESULT");
	            String format = intent.getStringExtra("SCAN_RESULT_FORMAT");
	            // Handle successful scan
				//	http://mime.starset.net/journeylog/log.php?station=chp1&rid=
				//	 checkpoint id, runner id, device id, location
	            // TODO: include location 
	            try {
	            	// TODO: make asynchronous
		            String urlString = "http://thomaslotze.com/survivedc/checkpoint.cgi?cid=" + checkpointId + "&rid=" + contents + "&did=" + deviceId;
					HttpClient httpclient = new DefaultHttpClient();
				    HttpResponse response = httpclient.execute(new HttpGet(urlString));
				    StatusLine statusLine = response.getStatusLine();
				    if(statusLine.getStatusCode() == HttpStatus.SC_OK){
				        ByteArrayOutputStream out = new ByteArrayOutputStream();
				        response.getEntity().writeTo(out);
				        out.close();
				        String responseString = out.toString();
				    } else{
				        //Closes the connection.
				        response.getEntity().getContent().close();
				        // TODO: store result 
				        throw new IOException(statusLine.getReasonPhrase());
				    }
	            } catch (IOException e) {
	            	// TODO: handle IOException
	            }
		        // restart barcode scanner
		        Intent scanIntent = new Intent("com.google.zxing.client.android.SCAN");
		        scanIntent.setPackage("com.google.zxing.client.android");
		        scanIntent.putExtra("SCAN_MODE", "QR_CODE_MODE");
		        startActivityForResult(scanIntent, 0);
	        } else if (resultCode == RESULT_CANCELED) {
	            // go back to main (checkpoint selection)
	            setContentView(R.layout.main);
	        }
	    }
	}
}