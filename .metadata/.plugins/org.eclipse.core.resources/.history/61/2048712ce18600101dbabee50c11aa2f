package com.thomaslotze.survivedc;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import com.google.zxing.integration.android.IntentIntegrator;
import com.google.zxing.integration.android.IntentResult;

import android.app.Activity;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.net.Uri;
import android.os.Bundle;
import android.telephony.TelephonyManager;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

public class SelectCheckpoint extends Activity {
	String checkpointId = "";
	String deviceId = "";
	LocationManager locationManager;
	LocationListener locationListener;
	Location location = null;
	SQLiteDatabase db = null;
	
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        
        // Check and see if barcode scanner is available; if not, prompt the user to download and install it
        final boolean scanAvailable = isIntentAvailable(this,"com.google.zxing.client.android.SCAN");
        
        if (!scanAvailable) {
            ((TextView) findViewById(R.id.checkpointInfo)).setText("You need to download the barcode scanner.");

//            Intent barcodeDownloadIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://zxing.googlecode.com/files/BarcodeScanner3.5.apk"));
//        	startActivity(barcodeDownloadIntent); 
//            
//        	Intent marketIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("market://search?q=pname:com.google.zxing.client.android"));
//        	startActivity(marketIntent); 
//        	
//	        Intent intent = new Intent(Intent.ACTION_VIEW);
//	        intent.setData(Uri.parse("market://details?id=com.google.zxing.client.android"));
//	        startActivity(intent);
        }
        
        // get unique phone id from a combination of sources
        final TelephonyManager tm = (TelephonyManager) getBaseContext().getSystemService(Context.TELEPHONY_SERVICE);
        final String tmDevice, tmSerial, androidId;
        tmDevice = "" + tm.getDeviceId();
        tmSerial = "" + tm.getSimSerialNumber();
        androidId = "" + android.provider.Settings.Secure.getString(getContentResolver(), android.provider.Settings.Secure.ANDROID_ID);
        UUID deviceUuid = new UUID(androidId.hashCode(), ((long)tmDevice.hashCode() << 32) | tmSerial.hashCode());
        deviceId = deviceUuid.toString();
        
        // Acquire a reference to the system Location Manager
        locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);
        // Define a listener that responds to location updates
        locationListener = new LocationListener() {
            public void onLocationChanged(Location location) {
              // Called when a new location is found by the network location provider.
              updateLocation(location);
            }

            public void onStatusChanged(String provider, int status, Bundle extras) {}

            public void onProviderEnabled(String provider) {}

            public void onProviderDisabled(String provider) {}
        };
        // Register the listener with the Location Manager to receive location updates
        locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListener);
        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListener);

        // Get a DB connection
    	RunnerOpenHelper dbOpenHelper = new RunnerOpenHelper(getApplicationContext());
    	db = dbOpenHelper.getWritableDatabase();
        String[] columns = {"is_uploaded"};
        Cursor cursor = db.query("runners", columns, null, null, null, null, null);
        Integer numScans = cursor.getCount();
        Integer numUploaded = 0;
        if (cursor.moveToFirst()) {
        	do {
	        	numUploaded += cursor.getInt(0);        		
        	} while (cursor.moveToNext());
        }
        cursor.close();

        ((TextView) findViewById(R.id.checkpointInfo)).setText(numScans.toString() + " scanned, " + numUploaded.toString() + " uploaded.");
        
        processRunner("monkey");
    }
    
    public void selectCheckpoint(View view) {
        checkpointId=((Button)view).getText().toString();
        setContentView(R.layout.scanning);
        IntentIntegrator.initiateScan(this); 
//        Intent intent = new Intent("com.google.zxing.client.android.SCAN");
//        intent.setPackage("com.google.zxing.client.android");
//        intent.putExtra("SCAN_MODE", "QR_CODE_MODE");
//        startActivityForResult(intent, 0);
    }
    
	/**
	 * Indicates whether the specified action can be used as an intent. This
	 * method queries the package manager for installed packages that can
	 * respond to an intent with the specified action. If no suitable package is
	 * found, this method returns false.
	 *
	 * @param context The application's environment.
	 * @param action The Intent action to check for availability.
	 *
	 * @return True if an Intent with the specified action can be sent and
	 *         responded to, false otherwise.
	 */
	public static boolean isIntentAvailable(Context context, String action) {
	    final PackageManager packageManager = context.getPackageManager();
	    final Intent intent = new Intent(action);
	    List<ResolveInfo> list =
	            packageManager.queryIntentActivities(intent,
	                    PackageManager.MATCH_DEFAULT_ONLY);
	    return list.size() > 0;
	}
	
	// We only really want an approximation of geolocation, so once we get it, stop listening
	public void updateLocation(Location updated_location) {
		location = updated_location;
		if (updated_location.getProvider() == LocationManager.GPS_PROVIDER) {
			locationManager.removeUpdates(locationListener);
		}
	}

	public void processRunner(String runnerId) {
        // Handle successful scan
		//	http://mime.starset.net/journeylog/log.php?station=chp1&rid=
		//	 checkpoint id, runner id, device id, location
        try {
        	String timeString = new Integer(((Long)(new Date().getTime())).intValue()).toString();

        	// Store in local DB

        	ContentValues runnerValues = new ContentValues(3);
        	runnerValues.put("runner_id", runnerId);
        	runnerValues.put("checkpoint_id", checkpointId);
        	runnerValues.put("timestamp", Integer.parseInt(timeString));
        	runnerValues.put("is_uploaded", 0);	            	
        	db.insert("runners", null, runnerValues);
        	
        	// TODO: make asynchronous
        	String latString="";
        	String lonString="";
        	if (location != null) {
        		latString = ((Double)location.getLatitude()).toString();
        		lonString = ((Double)location.getLongitude()).toString();
        	}
            String urlString = "http://thomaslotze.com/survivedc/checkpoint.cgi?cid=" + java.net.URLEncoder.encode(checkpointId) + "&rid=" + java.net.URLEncoder.encode(runnerId) + "&did=" + java.net.URLEncoder.encode(deviceId) + "&lat=" + java.net.URLEncoder.encode(latString) + "&lon=" + java.net.URLEncoder.encode(lonString) + "&ts=" + java.net.URLEncoder.encode(timeString);
			HttpClient httpclient = new DefaultHttpClient();
		    HttpResponse response = httpclient.execute(new HttpGet(urlString));
		    StatusLine statusLine = response.getStatusLine();
		    if(statusLine.getStatusCode() == HttpStatus.SC_OK){
		        ByteArrayOutputStream out = new ByteArrayOutputStream();
		        response.getEntity().writeTo(out);
		        out.close();
		        String responseString = out.toString();
		        ContentValues successValues = new ContentValues(1);
		        successValues.put("is_uploaded", 1);	            	
            	db.update("runners", successValues, "runner_id='" + runnerId + "'", null);
		    } else{
		        //Closes the connection.
		        response.getEntity().getContent().close();
		        // TODO: store result 
		        throw new IOException(statusLine.getReasonPhrase());
		    }
        } catch (IOException e) {
        	// IOException; we should try to re-upload later
        }		
	}

	public void onActivityResult(int requestCode, int resultCode, Intent intent) {
		IntentResult scan=IntentIntegrator.parseActivityResult(requestCode, resultCode, intent);
		if (scan!=null) {
			String format = scan.getFormatName();
			String contents = scan.getContents();
            processRunner(contents);
            
	        // restart barcode scanner
            IntentIntegrator.initiateScan(this); 
//		        Intent scanIntent = new Intent("com.google.zxing.client.android.SCAN");
//		        scanIntent.setPackage("com.google.zxing.client.android");
//		        scanIntent.putExtra("SCAN_MODE", "QR_CODE_MODE");
//		        startActivityForResult(scanIntent, 0);
        } else  {
            // go back to main (checkpoint selection)
            setContentView(R.layout.main);
        }
	}

	@Override
	protected void onPause() {
		super.onPause();
		locationManager.removeUpdates(locationListener);
	}

	@Override
	protected void onResume() {
		super.onResume();
		if ((location != null) && (location.getProvider() == LocationManager.GPS_PROVIDER)) {
			locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListener);
	        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListener);
		}
	}
	
	public class RunnerOpenHelper extends SQLiteOpenHelper {

	    private static final int DATABASE_VERSION = 2;
	    private static final String DATABASE_NAME = "checkpoint_db";
	    private static final String RUNNER_TABLE_NAME = "runners";
	    private static final String KEY_RUNNER_ID = "runner_id";
	    private static final String KEY_CHECKPOINT_ID = "checkpoint_id";
	    private static final String KEY_TIMESTAMP = "timestamp";
	    private static final String KEY_IS_UPLOADED = "is_uploaded";
	    private static final String RUNNER_TABLE_CREATE =
	                "CREATE TABLE " + RUNNER_TABLE_NAME + " (" +
	                KEY_RUNNER_ID + " TEXT, " +
	                KEY_CHECKPOINT_ID + " TEXT, " +
	                KEY_TIMESTAMP + " INTEGER, " +
	                KEY_IS_UPLOADED + " INTEGER);";

	    RunnerOpenHelper(Context context) {
	        super(context, DATABASE_NAME, null, DATABASE_VERSION);
	    }

	    public void onCreate(SQLiteDatabase db) {
	        db.execSQL(RUNNER_TABLE_CREATE);
	    }

		@Override
		public void onUpgrade(SQLiteDatabase arg0, int arg1, int arg2) {
		}
	}
}